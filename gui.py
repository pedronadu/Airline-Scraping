# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import os
import sys
import main
import threading
import traceback
from pathlib import Path
from tkinter import scrolledtext, Tk, Canvas, Entry, Button, PhotoImage
window = Tk()


class MainGui:
    def __init__(self):

        self.OUTPUT_PATH = Path(__file__).parent
        self.ASSETS_PATH = self.OUTPUT_PATH / Path("Img")

        self.log_num_lines = 0
        log_txt = open("log.txt", "w")
        log_txt.close()

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    @staticmethod
    def exit_app():
        window.destroy()

    @staticmethod
    def interromper():
        window.destroy()
        sys.exit()

    def update_log_status(self):
        curr_lines = None
        file = os.getcwd() + r"\log.txt"
        with open(file, 'r') as f:
            curr_lines = f.readlines()
        while len(curr_lines) > self.log_num_lines:
            self.scroll_text.insert('end', curr_lines[self.log_num_lines])
            self.log_num_lines += 1
        window.after(1000, self.update_log_status)

    def create_screen(self):

        window.geometry("370x433")
        window.configure(bg = "#1B0088")
        local_path = os.path.abspath("/".join(os.path.dirname(sys.argv[0]).split("/"))).replace(r'\\', '/')
        window.iconbitmap(f'{local_path}\\Img\\airplane.ico')
        window.title(f"Airline Scraping")
        window.protocol('WM_DELETE_WINDOW', self.exit_app)

        canvas = Canvas(
            window,
            bg="#1B0088",
            height=433,
            width=370,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)
        image_image_1 = PhotoImage(
            file=self.relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            185.0,
            116.0,
            image=image_image_1
        )

        entry_image_1 = PhotoImage(
            file=self.relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            185.0,
            330.5,
            image=entry_image_1
        )
        self.scroll_text = scrolledtext.ScrolledText(
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0
        )
        self.scroll_text.place(
            x=0.0,
            y=240.0,
            width=370.0,
            height=179.0
        )

        bt = Button(text="Close",
                    font="Inter 12 normal",
                    command=self.interromper,
                    activebackground="#E8114B",
                    bg="#E8114B")
        bt.place(
            x=218.0,
            y=163.0,
            width=129.0,
            height=59.0
        )

        bt2 = Button(text="Search all",
                     font="Inter 12 normal",
                     command=lambda: self.second_b(),
                     activebackground="#E8114B",
                     bg="#E8114B")
        bt2.place(
            x=218.0,
            y=16.0,
            width=129.0,
            height=59.0
        )

        entry_image_2 = PhotoImage(
            file=self.relative_to_assets("entry_2.png"))
        entry_bg_2 = canvas.create_image(
            180.5,
            134.5,
            image=entry_image_2
        )
        entry_2 = Entry(
            bd=0,
            bg="#D9D9D9",
            fg="#000716",
            highlightthickness=0
        )
        entry_2.place(
            x=14.0,
            y=125.0,
            width=333.0,
            height=17.0
        )

        bt3 = Button(text="Search for flights",
                     font="Inter 12 normal",
                     command=lambda: self.first_b(entry_2.get()),
                     activebackground="#E8114B",
                     bg="#E8114B")
        bt3.place(
            x=14.0,
            y=16.0,
            width=129.0,
            height=59.0
        )

        window.resizable(False, False)
        window.after(500, self.update_log_status)
        window.mainloop()

    @staticmethod
    def first_b(location):
        th = Th(1, location)
        th.start()

    @staticmethod
    def second_b():
        th = Th(2, None)
        th.start()


class Th(threading.Thread):

    def __init__(self, funct, location):
        threading.Thread.__init__(self, daemon=True)
        self.funct = funct
        self.location = location
        self.stop = threading.Event()

    def run(self):
        try:
            if self.funct == 1:
                main.search(self.location)
            elif self.funct == 2:
                main.search_all()

        except Exception:
            print(traceback.format_exc())
            log_txt = open("log.txt", "a")
            log_txt.write(f"--------------------------------------------------\n")
            log_txt.write(traceback.format_exc())
            log_txt.close()
